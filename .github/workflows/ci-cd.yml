name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Extract pnpm version from lock file
        id: pnpm-version
        run: echo "::set-output name=VERSION::$(grep pnpmVersion pnpm-lock.yaml | awk '{print $2}')"

      - name: Install pnpm
        run: npm install -g pnpm@${{ steps.pnpm-version.outputs.VERSION }}

      - name: Verify pnpm installation
        run: pnpm --version

      - name: Cache pnpm store
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ matrix.node-version }}-

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: node_modules
          key: pnpm-deps-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-deps-${{ matrix.node-version }}-

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        run: pnpm test

      - name: Build application
        run: pnpm build

      - name: Cache build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: .next

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 20.x

      - name: Extract pnpm version from lock file
        id: pnpm-version
        run: echo "::set-output name=VERSION::$(grep pnpmVersion pnpm-lock.yaml | awk '{print $2}')"

      - name: Install pnpm
        run: npm install -g pnpm@${{ steps.pnpm-version.outputs.VERSION }}

      - name: Verify pnpm installation
        run: pnpm --version

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .next

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: node_modules
          key: pnpm-deps-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-deps-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          pnpm add -g vercel
          vercel --token $VERCEL_TOKEN --prod