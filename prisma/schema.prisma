// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  age              Int?
  gender           String?
  sexualPreference String?
  email            String?   @unique
  emailVerified    DateTime?
  personality      Json?
  accounts         Account[]
  sessions         Session[]
  image            String?
  images           Image[]
  matchesAsUser1   Match[]   @relation("User1Matches")
  matchesAsUser2   Match[]   @relation("User2Matches")
}

model Match {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  user1_id   String
  user2_id   String
  similarity Float
  user1      User   @relation("User1Matches", fields: [user1_id], references: [id])
  user2      User   @relation("User2Matches", fields: [user2_id], references: [id])
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//
//
// model User {
//   id                 String   @id @default(uuid())
//   gender             String
//   sexual_preference  String
//   personality        Json
//   matches            Match[]
// }
//
// model Match {
//   id         String   @id @default(uuid())
//   similarity Float
//   users      User[]   @relation(references: [id])
// }
//
// model MatchUser {
//   id         String   @id @default(uuid())
//   userId     String
//   matchId    String
//   user       User     @relation(fields: [userId], references: [id])
//   match      Match    @relation(fields: [matchId], references: [id])
//
//   @@unique([userId, matchId])
// }